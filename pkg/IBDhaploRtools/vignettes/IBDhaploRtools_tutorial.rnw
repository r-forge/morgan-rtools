\documentclass[12pt]{article} % Uses 10pt

\usepackage{Sweave}



\SweaveOpts{keep.source=TRUE}

\title{ IBD\_Haplo R Tools}
\author{Marshall Brown, updated by E. A. Thompson, Fiona Grimson}

\begin{document}

\maketitle
\section{Introduction}

\verb!IBDhaploRtools! consists of several functions to store, analyze,
and plot the output of the \verb!IBD_Haplo! software package. More
information regarding \verb!IBD_Haplo! can be found at
www.stat.washington.edu/thompson/Genepi/pangaea.shtml.

\section{Tutorial}
This tutorial provides a description of the main functions in this
package, and demonstrates how to implement these functions on the
\verb!IBD_Haplo! gold standards. The gold standards used by this
tutorial were created by running \verb!IBD_Haplo! on four sets of four
simulated haplotypes/two individuals. Specifically, the
\verb!IBD_Haplo! output files were created by running the MORGAN
program \verb!ibd_haplo!, as described in the file
\verb!README_ibdhap!, which can be found in the ``Gold'' subdirectory
of the \verb!IBD\_Haplo! directory in MORGAN.  If the executable is
linked to the current directory, the linux command
\begin{center}
\verb! ./ibd_haplo ibd_haplo.par > ibd_haplo.out! 
\end{center}
creates the file ``qibd\_h\_gold.out.'' This file, along with ``compu\_4hap.dat'' and 
``trueibd\_h\_Gold.txt'' are the only files needed to follow along in this tutorial.  These
three files, together with the gzipped tar file of the R package should be 
placed in the directory where you will open your R session.

To begin, we can install the package into \verb!R! by downloading\\
``\verb!IBDhaploRtools\_1.2.tar.gz!,'' opening an \verb!R! session, and running:
  
<<load.package>>=

#install.packages("IBDhaploRtools_1.2.tar.gz", repos = NULL)
library("IBDhaploRtools")

@

Now that we have installed the package, we can use the help pages by
typing \verb!?[function name]! (for example
\verb!?ibdhap.make.states!.) Please see these for more information on
function arguments. It is important to note that all the functions
listed below besides \verb!ibdhap.makes.states! take the output of
\verb!ibdhap.make.states! as input. Thus, it is imperative to run this
\verb!ibdhap.make.states! first.

\begin{description}

\item [ibdhap.make.states:] stores and simplifies the main output
  files (called ``qibd\_h.out'' in the Gold examples) created by IBD
  Haplo. This is acheived by ``calling'' a marker to be in an ibd
  state if the probability of the state for the marker (conditional on
  the data and the model) meets the ``cutoff'' value. If the cuttoff
  is met, the value of the marker is set to the ibd state (integer
  value from 1--15 or 1--9), otherwise value of the marker is set to 0
  ( which means this marker is a ``no call''.)
  \verb!ibdhap.make.states! outputs a \verb!R! \verb!data.frame! where
  each row is a marker, and each column is a set of four
  haplotypes. The value at a marker for a set of haplotypes is as
  described above. The \verb!R! \verb!data.frame! that this function
  creates is expected by other functions in this package.

To run this function on the gold standards, run:

<<ibdhap.make.states>>=

qibd.gold<- ibdhap.make.states( qibd.filename = "qibd_phased_2011.gold",
                   dat.filename="ids_phased_2011.gold" , cutoff = 0.8)

@

This data frame has four columns and 2,000 rows (one for each
marker). The first 20 markers for each haplotype are:
<<ibdhap.make.states.show>>=

qibd.gold[1:20,]

@  

For marker eight, we see that \verb!IBD_Haplo! inferred with greater
than 0.8 probability that the first set of haplotypes were in IBD
state 5 while the other three sets of haplotypes were in IBD state 15
(no IBD shared).

\item [ibdhap.summary :] summarizes the data created by \verb!ibdhap.make.states! by
calculating mean lengths of ibd segments, mean proportions of ibd shared, and
counts on ibd segments. Averages are taken over all markers and all sets of haplotypes.


<<ibdhap.summary>>=
 
summary.gold <- ibdhap.summary( qibd.gold, data.type="h")

summary.gold$mean.prop
summary.gold$mean.length
summary.gold$seg.counts
@

This shows, for example, that on average 70.35 \% of the chromosome is
in IBD state 15 (no ibd shared among the four haplotypes), and that
the mean length (number of markers) of a continuous segment of the
chromosome with no ibd shared is 152.02703 markers.



\item [ibdhap.seg.lengths :] given the ibd states from a set of
  haplotypes/pair of genotypes (taken from a column of the output of
  ibdhap.make.states), this function creates a \verb!data.frame!
  consisting of all segments of differing ibd state, paired with their
  respective length. This function is called by many of the other
  functions, and provides equivalent information held in a column of
  ``qibd.gold'' but just in a different form.

<<ibdhap.seg.lengths>>=

seg.lengths.gold<-ibdhap.seg.lengths(qibd.gold[,4])
seg.lengths.gold
@ 

For the fourth set of haplotypes, this shows that there are 30
segments of differing ibd state as inferred by \verb!IBD_Haplo!. The
seventh segment is in ibd state 12 and consists of 165 markers, while
the ninth segment is in ibd state 15 and consists of 117
markers. If a vector of positions is given, segment lengths will be
given in its respective units. Notice how this portrays the same
information as \verb!qibd[,4]!, but in a more compact form.

 
\item[ibdhap.transitions:] creates a matrix of transition counts from
  when ibd state switches along the chromosome.

<<ibdhap.transitions, keep.source=TRUE>>=

options(width=100) #set the display so the matrix displays nicely
transitions.gold<-ibdhap.transitions(qibd.gold, data.type="h")
#split the transitions matrix into two parts so it fits on the
#document
transitions.gold[,1:8]
transitions.gold[,9:15]

@

Hence, across all sets of haplotypes, there where four instances when
ibd state 12 transitioned to ibd state 15.

\item[ibdhap.barplot :] Graphically displays regions of any ibd
  sharing, no ibd sharing and no calls along a chromosome for a set of
  haplotypes / pair of genotypes. The default colors are red, white,
  and grey for any state with ibd sharing, no ibd sharing and no
  calls, respectively.

<<ibdhap.barplot>>=
 
par(mfrow=c(4,1)) 
ibdhap.barplot(qibd.gold[,1], data.type="h", xlab="", ylab="") 
ibdhap.barplot(qibd.gold[,2], data.type="h", xlab="", ylab="")
ibdhap.barplot(qibd.gold[,3], data.type="h", xlab="", ylab="")
ibdhap.barplot(qibd.gold[,4], data.type="h", xlab="", ylab="")

@


\begin{figure}
\begin{center}

<<label=fig1, fig=TRUE, echo=FALSE>>=
<<ibdhap.barplot>>

@

\end{center}
\caption{Barplots for four sets of four haplotypes using IBD\_Haplo
  output. Red means some ibd shared, white is no ibd shared and grey
  means ``no call.''}
\end{figure}

We can see that the first set of haplotypes does not have much
(inferred) ibd shared among the four haplotypes, while the fourth set
has a large portion of the chromosome in an ibd state where ibd is
shared among the four haplotypes. Since we simulated these haplotypes,
and therefore know the true ibd states for these four sets of
haplotypes, it is interesting to compare the previous barplots to
similar barplots created from using the known ibd states. The true ibd
patterns shared among the four sets of haplotypes are contained in the
file ``trueibd\_h\_Gold.txt''.

<<load.simulated.gold, keep.source=TRUE>>=

trueibd.gold<-read.table("trueibd_h_Gold.txt")
trueibd.gold<-t(trueibd.gold) #transpose the data
#get rid of extra "names" rows
trueibd.gold<-trueibd.gold[-(1:2),] 
@

<<trueibd.barplot>>=
 
par(mfrow=c(4,1)) 

ibdhap.barplot(trueibd.gold[,1], data.type="h", xlab="", ylab="") 
ibdhap.barplot(trueibd.gold[,2], data.type="h", xlab="", ylab="")
ibdhap.barplot(trueibd.gold[,3], data.type="h", xlab="", ylab="")
ibdhap.barplot(trueibd.gold[,4], data.type="h", xlab="", ylab="")
@ 

\begin{figure}
\begin{center}

<<label=fig2, fig=TRUE, echo=FALSE>>=
<<trueibd.barplot>>

@

\end{center}
\caption{Barplots for four sets of four haplotypes using simulated
  data. Red means some ibd shared, and white is no ibd shared}
\end{figure}

Upon inspection, we see that \verb!IBD_Haplo! does well in inferring
ibd in this example.

\item[ibdhap.correct.bylen :] if simulated data (true ibd state) is
  available, this function creates a dataframe summarizing how well
  \verb!IBD_haplo! infers segments based on segment length.  Each row
  in the dataframe represents a segment of true (simulated) ibd
  (shared or not shared).  If \verb!ibd.only! is true, then only
  segments where ibd is shared are returned. The first column of
  resulting dataframe gives the length of the segment (as specified by
  the position vector), the second column gives the proportion of
  markers inferred correctly by ibdhaplo, and the third column gives
  the ibd state of the segment.
<<correct.bylen>>=

 gold.corr.bylen<-ibdhap.correct.bylen( qibd.gold, 
          trueibd.gold, data.type="h", 
          ibd.only=FALSE, position=NA)
 
@ 

We can use the output of \verb!ibdhap.correct.bylen! to create figure
3.  The x axis is the length of the segment, and the y axis is
proportion snps called correctly within the true segment.


<<fig3.code>>=
 plot( gold.corr.bylen[,1], gold.corr.bylen[,2], 
       xlab="segment length", ylab="proportion correct")

lines(lowess(gold.corr.bylen[,1], 
      gold.corr.bylen[,2]), col="blue")
@ 

\begin{figure}
\begin{center}

<<label=fig3, fig=TRUE, echo=FALSE>>=
<<fig3.code>>

@

\end{center}
\caption{Each point in the plot is a segment of true (simulated) ibd
  (shared or not shared).The x axis is the length of the segment, and
  the y axis is proportion snps called correctly within the true
  segment}
\end{figure}

We can see by figure 3 that \verb!IBD\_Haplo! does very well with ibd
segments that are above 25 to 50 snps in length. In these data, this
corresponds with ibd segments that are roughly one centimorgan in
length.




\end{description}


This completes our quick run through of the main functions of
\verb!IBDHaploRtools!. Note that all functions that we ran above for
haplotypic data can also be run on genotypic data by setting
\verb!data.type=``g''!. Please see the man pages for more information
regarding function arguments, descriptions, and examples.










     

\end{document}
